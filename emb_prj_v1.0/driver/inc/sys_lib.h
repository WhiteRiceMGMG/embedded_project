/*********************************************************************************/
/* Copyright OGAWA CONST                                                         */
/*********************************************************************************/
/* file : sys_Def.h                                                              */
/* abst : ハードウエア関連共通定義                                                   */
/* hist : 2025 / 10 /03                                                          */
/*********************************************************************************/

#ifndef SYSLIB_H
#define SYSLIB_H
/* 
 *** Try Kernel
 *      共通ライブラリ関数定義
 */

/* 32bitレジスタからの入力 */
/*********************************************************************************/
/* 関数   | in_w(UW adr)                                                         */
/* 説明   | 32bitレジスタからの入力                                                 */
/* 引数   | UW adr                                                               */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
static inline UW in_w(UW adr)
{
    return *(_UW*)adr;
}

/* 32bitレジスタへの出力 */
/*********************************************************************************/
/* 関数   |  out_w(UW adr, UW data)                                               */
/* 説明   | 32bitレジスタへの出力                                                   */
/* 引数   | UW adr, UW data                                                       */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
static inline void out_w(UW adr, UW data)
{
    *(_UW*)adr = data;
}

/* 32bitレジスタへの出力(ビットクリア) */
/*********************************************************************************/
/* 関数   | clr_w(UW adr, UW data)                                                */
/* 説明   | 32bitレジスタへの出力(ビットクリア)                                       */
/* 引数   | UW adr, UW data                                                       */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
#define OP_CLR      0x3000
static inline void clr_w(UW adr, UW data)
{
    *(_UW*)(adr + OP_CLR) = data;
}

/* 32bitレジスタへの出力(ビットセット) */
/*********************************************************************************/
/* 関数   | set_w(UW adr, UW data)                                                */
/* 説明   | 32bitレジスタへの出力(ビットセット)                                       */
/* 引数   | UW adr, UW data                                                       */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
#define OP_SET       0x2000
static inline void set_w(UW adr, UW data)
{
    *(_UW*)(adr + OP_SET) = data;
}

/* 32bitレジスタへの出力(ビット排他的論理和) */
/*********************************************************************************/
/* 関数   | xset_w(UW adr, UW data)                                               */
/* 説明   | 32bitレジスタへの出力(ビット排他的論理和)                                  */
/* 引数   | UW adr, UW data                                                       */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
#define OP_XOR      0x1000
static inline void xset_w(UW adr, UW data)
{
    *(_UW*)(adr + OP_XOR) = data;
}

/* PRIMASKレジスタ制御インライン関数 */
/*********************************************************************************/
/* 関数   | set_primask( INT pm )                                                 */
/* 説明   | PRIMASKレジスタ制御インライン関数                                         */
/* 引数   | INT pm                                                                */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
static inline void set_primask( INT pm )
{
    __asm__ volatile("msr primask, %0":: "r"(pm));
}

/*********************************************************************************/
/* 関数   |  get_primask( void )                                                  */
/* 説明   | PRIMASKレジスタ取得インライン関数                                        */
/* 引数   | なし                                                                  */
/* 戻り値 | なし                                                                  */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
static inline UW get_primask( void )
{
    UW  pm;
    __asm__ volatile("mrs %0, primask": "=r"(pm));
    return pm;
}

/* 割込み禁止マクロ */
#define	DI(intsts)	(intsts=get_primask(), set_primask(1))

/* 割込み許可マクロ */
#define	EI(intsts)	(set_primask(intsts))

/* デバッグ用シリアル通信 */
/*********************************************************************************/
/* 関数   | tm_com_init(void)                                                     */
/* 説明   | デバッグ用シリアル通信                                                   */
/* 引数   | なし                                                                   */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
void tm_com_init(void);
/*********************************************************************************/
/* 関数   | tm_putstring(char* str)                                               */
/* 説明   | デバッグ用シリアル通信                                                   */
/* 引数   | char* str                                                             */
/* 戻り値 | なし                                                                   */
/* 作成   | 2025 / 10 /03                                                         */
/*********************************************************************************/
UINT tm_putstring(char* str);

#endif  /* STYLIB_H */

/*********************************************************************************/
/* EOF                                                                           */
/*********************************************************************************/